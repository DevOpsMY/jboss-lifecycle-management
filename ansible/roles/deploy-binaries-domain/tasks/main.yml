---

- name: Create deployment directory
  file:
    path: "{{ jboss_deployment_path }}"
    state: directory
    recurse: yes
    owner: "{{ jboss_usr }}"
    group: "{{ jboss_usr }}"

- name: Create a backup of the binaries
  command: "cp --backup=t '{{ jboss_deployment_path }}/{{ item.finalBinariesName }}' '{{ jboss_deployment_path }}/{{ item.backupBinariesName }}'"
  ignore_errors: yes
  loop: "{{ binaries }}"
  when: item.isDeploy | default(false) | bool == true

- name: Transfer binaries to the deployment directory
  command: "curl -u {{ artifactory_usr }}:{{ artifactory_pass }} -o '{{ jboss_deployment_path }}/{{ item.finalBinariesName }}' -ssf {{ item.binariesLocation }}"
  loop: "{{ binaries }}"
  when: item.isDeploy | default(false) | bool == true

- name: Retrieve deployment information for binaries associated with the designated JBoss server group
  shell: "'{{ jboss_cli_path }}/jboss-cli.sh' --connect --controller={{ jboss_console_url }} --commands=\"deployment-info --name={{ item[0].finalBinariesName }}\" | grep '{{ item[1] }} ' | awk {'print $2 $3'}"
  environment:
      JAVA_HOME: "{{ java_home_path }}"
  with_nested:
    - "{{ binaries }}"
    - "{{ jboss_deployment_server_group }}"
  loop_control:
    label: "war={{ item[0].finalBinariesName }}, server group={{ item[1] }}"
  when: item[0].isDeploy | default(false) | bool == true and ((item[0].isServerGroup1 | bool == true and item[1]  == jboss_deployment_server_group[0]) or (item[0].isServerGroup2 | bool == true and item[1] == jboss_deployment_server_group[1]) or (item[0].isServerGroup3 | bool == true and item[1] == jboss_deployment_server_group[2]) or (item[0].isServerGroup4 | bool == true and item[1] == jboss_deployment_server_group[3]) or (item[0].isServerGroup5 | bool == true and item[1] == jboss_deployment_server_group[4]))
  ignore_errors: yes
  register: binariesDeploymentInfo

- name: Fetch a list of binaries intended for deployment
  set_fact:
    deployBinariesName: "{{ deployBinariesName | default([]) + [ item.item[0].finalBinariesName ] }}"
  loop: "{{ binariesDeploymentInfo.results }}"
  loop_control:
    label: "war={{ item.item[0].finalBinariesName }}, server group={{ item.item[1] }}"
  when: item.changed | default(false) | bool == true

- name: Perform binaries deployment onto the JBoss server
  command: "'{{ jboss_cli_path }}/jboss-cli.sh' --connect --controller={{ jboss_console_url }} --command=\"deploy {{ jboss_deployment_path }}/{{ item }} --force\""
  environment:
      JAVA_HOME: "{{ java_home_path }}"
  loop: "{{ deployBinariesName | unique }}"
  loop_control:
    label: "war={{ item }}"

- name: Assign the new binaries to their corresponding JBoss server group
  command: "'{{ jboss_cli_path }}/jboss-cli.sh' --connect --controller={{ jboss_console_url }} --command=\"deploy --name={{ item.item[0].finalBinariesName }} --server-groups={{ item.item[1] }}\""
  environment:
      JAVA_HOME: "{{ java_home_path }}"
  loop: "{{ binariesDeploymentInfo.results }}"
  loop_control:
    label: "war={{ item.item[0].finalBinariesName }}, server group={{ item.item[1] }}"
  when: item.changed | default(false) | bool == true and (item.stdout | trim == "" or item.stdout | trim == "notadded")
